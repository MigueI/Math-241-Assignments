ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3"), range)
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3")) +
coord_cartesian(xlim = c(1.0, 1.2))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(1,3))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
vdf <- mutate(vdf, jitterD = jitter(Dia)) %>% mutate(vdf, jitterT = jitter(Trial))
mutate(vdf, jitterT = jitter(Trial))
vdf
mutate(vdf, jitterT = jitter(Trial))
vdf <- mutate(vdf, jitterD = jitter(Dia)) %>% mutate(, jitterT = jitter(Trial))
vdf <- mutate(vdf, jitterT = jitter(Trial))
vdf <- mutate(vdf, jittert = jitter(trial))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = jittert, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = jittert, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = height, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Oil Height (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)"))
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
4/12
h <- c(1.52,1.27,1.02,1.51,1.26,1.01,1.26)
h_E <- c(0.04, 0.04, 0.03, 0.03, 0.03,0.03,0.03)
T <- c(1.0, 2/24, 0.0, 17/17, 7/19, 0/18, 4/12)
barrier <- c(2.75,3.0,3.25,2.75,3.0,3.25,3.0)
trial <- c(1,1,1,2,2,2,3)
D1 <- round(mean(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672)), digits = 2)
D_SE1 <- round(sd(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672))/sqrt(9), digits = 2)
D2 <- round(mean(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078)), digits = 2)
D_SE2 <- round(sd(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078))/sqrt(9), digits = 2)
D3 <- round(mean(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090)), digits = 2)
D_SE3 <- round(sd(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090))/sqrt(9), digits = 2)
D <- c(D1,D1,D1,D2,D2,D2,D3)
df <- data.frame(trial, barrier, h, h_E, T, D)
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
h <- c(1.52,1.27,1.02,1.51,1.26,1.01,1.26)
h_E <- c(0.04, 0.04, 0.03, 0.03, 0.03,0.03,0.03)
T <- c(1.0, 2/24, 0.0, 17/17, 7/19, 0/18, 4/13)
barrier <- c(2.75,3.0,3.25,2.75,3.0,3.25,3.0)
trial <- c(1,1,1,2,2,2,3)
D1 <- round(mean(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672)), digits = 2)
D_SE1 <- round(sd(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672))/sqrt(9), digits = 2)
D2 <- round(mean(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078)), digits = 2)
D_SE2 <- round(sd(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078))/sqrt(9), digits = 2)
D3 <- round(mean(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090)), digits = 2)
D_SE3 <- round(sd(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090))/sqrt(9), digits = 2)
D <- c(D1,D1,D1,D2,D2,D2,D3)
df <- data.frame(trial, barrier, h, h_E, T, D)
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
setwd("~/Desktop/Math  241 (Case Studies - Statistical Analysis)/Math-241-Assignments/HW4")
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(rvest))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(maps))
suppressPackageStartupMessages(library(maptools))
suppressPackageStartupMessages(library(ggmap))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(magrittr))
suppressWarnings(invisible(gpclibPermit()))
quantile(WW.map$Median_Household_Income, c(0,0.2,0.4,0.6,0.8,1.0))
WW <- readShapeSpatial("ww")
WW.data <- WW@data %>% tbl_df()
suppressWarnings(
WW.map <- fortify(WW, region="FIPS") %>%
tbl_df() %>%
left_join(WW.data, by=c("id" = "FIPS"))
)
WW.map$id <- as.numeric(WW.map$id)
WW.map <- left_join(WW.map, cancer.data, by = c("id" = "FIPS")) %>%
mutate(cancer_rate = cancer_counts/POP2000)
SEER <- read.csv("Space Time Surveillance Counts 11_05_09.txt", header=TRUE) %>% tbl_df()
# Rename column.
names(SEER)[1] <- "FIPS"
cancer.data <- SEER %>%
filter(SiteRecodeTxt == "Breast ") %>%
group_by(FIPS) %>%
summarize(cancer_counts = n())
WW.map <- left_join(WW.map, cancer.data, by = c("id" = "FIPS")) %>%
mutate(cancer_rate = cancer_counts/POP2000)
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
WW.map <- left_join(WW.map, census, by = c("id" = "FIPS_code"))
quantile(WW.map$Median_Household_Income, c(0,0.2,0.4,0.6,0.8,1.0))
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5) )
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5) )
for(j in seq(1:length(j))){}
if(l >= WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5) )
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5) )
for(j in seq(1:length(j))){
if(l >= WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5) )
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5) )
for(j in seq(1:length(j))){
if(l =< WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(j))){
if(l =< WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(j))){
if(l =< WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5));
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5));
for(j in seq(1:length(j))){
if(l =< WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5));
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5));
for(j in seq(1:length(j))){
if(l < WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5));
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5));
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
seq(1:length(WW.map))
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5));
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5));
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
seq(1:5)
for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5));
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5));
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[j] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
WW.map$Median_Household_Income[[3]]
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5)))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]]){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l =< WW.map$Median_Household_Income[[j]] && WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] && WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
View(WW.data)
View(WW.map)
WW.map$Median_Household_Income[1]
is.numeric(WW.map$Median_Household_Income[1])
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] & WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(rvest))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(maps))
suppressPackageStartupMessages(library(maptools))
suppressPackageStartupMessages(library(ggmap))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(magrittr))
suppressWarnings(invisible(gpclibPermit()))
# Import data (FROM HW2).
SEER <- read.csv("Space Time Surveillance Counts 11_05_09.txt", header=TRUE) %>% tbl_df()
# Rename column.
names(SEER)[1] <- "FIPS"
cancer.data <- SEER %>%
filter(SiteRecodeTxt == "Breast ") %>%
group_by(FIPS) %>%
summarize(cancer_counts = n())
# Convert shapefile into "Spatial Polygons" AKA "sp" object
WW <- readShapeSpatial("ww")
WW.data <- WW@data %>% tbl_df()
suppressWarnings(
WW.map <- fortify(WW, region="FIPS") %>%
tbl_df() %>%
left_join(WW.data, by=c("id" = "FIPS"))
)
WW.map$id <- as.numeric(WW.map$id)
WW.map <- left_join(WW.map, cancer.data, by = c("id" = "FIPS")) %>%
mutate(cancer_rate = cancer_counts/POP2000)
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
WW.map <- left_join(WW.map, census, by = c("id" = "FIPS_code"))
# Our quantiles are given by:
quantile(WW.map$Median_Household_Income, c(0,0.2,0.4,0.6,0.8,1.0))
WW.map$income_quantile <- for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] & WW.map$Median_Household_Income[[j]] < u){
return(i)
}
}
}
return(i)
for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] & WW.map$Median_Household_Income[[j]] < u){
WW.map$income_quantile[j] <- i
}
}
}
View(WW.map)
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = income_quantile)) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_gradient(low='white', high='red')
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = income_quantile)) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_discrete(low='white', high='red')
for(i in seq(1:5)){
u <- quantile(WW.map$Median_Household_Income, (i/5))
l <- quantile(WW.map$Median_Household_Income, ((i-1)/5))
for(j in seq(1:length(WW.map))){
if(l < WW.map$Median_Household_Income[[j]] && WW.map$Median_Household_Income[[j]] < u){
WW.map$income_quantile[j] <- i
}
}
}
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = income_quantile)) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_discrete(low='white', high='red')
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = income_quantile)) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_discrete()
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = income_quantile)) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_manual(values = c("red","yellow","green","blue","purple"))
mean(WW.map$income_quantile)
WW.map$income_quantile[2]
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(rvest))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(maps))
suppressPackageStartupMessages(library(maptools))
suppressPackageStartupMessages(library(ggmap))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(magrittr))
suppressWarnings(invisible(gpclibPermit()))
# Import data (FROM HW2).
SEER <- read.csv("Space Time Surveillance Counts 11_05_09.txt", header=TRUE) %>% tbl_df()
# Rename column.
names(SEER)[1] <- "FIPS"
cancer.data <- SEER %>%
filter(SiteRecodeTxt == "Breast ") %>%
group_by(FIPS) %>%
summarize(cancer_counts = n())
# Convert shapefile into "Spatial Polygons" AKA "sp" object
WW <- readShapeSpatial("ww")
WW.data <- WW@data %>% tbl_df()
suppressWarnings(
WW.map <- fortify(WW, region="FIPS") %>%
tbl_df() %>%
left_join(WW.data, by=c("id" = "FIPS"))
)
WW.map$id <- as.numeric(WW.map$id)
WW.map <- left_join(WW.map, cancer.data, by = c("id" = "FIPS")) %>%
mutate(cancer_rate = cancer_counts/POP2000)
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
census$income_quantile <- 0
for(i in 1:5){
u <- quantile(census$Median_Household_Income, (i/5))[[1]]
l <- quantile(census$Median_Household_Income, ((i-1)/5))[[1]]
for(j in 1:nrow(census)){
if(l < census$Median_Household_Income[j] && u > census$Median_Household_Income[j]){
census$income_quantile[j] <- i
}
}
}
WW.map <- left_join(WW.map, census, by = c("id" = "FIPS_code"))
WW.map$income_quantile
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = factor(income_quantile))) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_manual(values = c("red","yellow","green","blue","purple","white"))
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
census$income_quantile <- 0
for(i in 1:5){
u <- quantile(census$Median_Household_Income, (i/5))[[1]]
l <- quantile(census$Median_Household_Income, ((i-1)/5))[[1]]
for(j in 1:nrow(census)){
if(l =< census$Median_Household_Income[j] && u > census$Median_Household_Income[j]){
census$income_quantile[j] <- i
}
}
}
WW.map <- left_join(WW.map, census, by = c("id" = "FIPS_code"))
ggplot(data=WW.map, aes(x=long, y=lat, group=group, fill = factor(income_quantile))) +
geom_polygon() +
geom_path(color="black", size=0.5) +
xlab("longitude") + ylab("latitude") +
scale_fill_manual(values = c("red","yellow","green","blue","purple","white"))
WW <- readShapeSpatial("ww")
WW.data <- WW@data %>% tbl_df()
suppressWarnings(
WW.map <- fortify(WW, region="FIPS") %>%
tbl_df() %>%
left_join(WW.data, by=c("id" = "FIPS"))
)
