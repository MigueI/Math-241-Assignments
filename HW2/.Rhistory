names(SEER)[2] <- "cancer_type"
names(SEER)[3] <- "age"
names(SEER)[4] <- "sex"
names(SEER)[5] <- "race"
names(SEER)[6] <- "year_diag"
census <- read.csv("census2000.csv", header=TRUE) %>% tbl_df()
names(census)[names(census)=="SE_T001_001"] <- "Total_Population"
names(census)[names(census)=="SE_T005_002"] <- "Males"
names(census)[names(census)=="SE_T005_003"] <- "Females"
names(census)[names(census)=="Geo_FIPS"] <- "FIPS_code"
names(census)[names(census)=="SE_T008_002"] <- "ZtF" #0-4
names(census)[names(census)=="SE_T008_003"] <- "FtN" #5-9
names(census)[names(census)=="SE_T008_004"] <- "TtF" #10-14
names(census)[names(census)=="SE_T008_005"] <- "FtS" #15-17
names(census)[names(census)=="SE_T008_006"] <- "EtT" #18-24
names(census)[names(census)=="SE_T008_007"] <- "TtT" #25-34
names(census)[names(census)=="SE_T008_008"] <- "TtFou" #35-44
names(census)[names(census)=="SE_T008_009"] <- "FtFif" #45-54
names(census)[names(census)=="SE_T008_010"] <- "FtSix" #55-64
names(census)[names(census)=="SE_T008_011"] <- "StS" #65-74
names(census)[names(census)=="SE_T008_012"] <- "StE" #75-84
names(census)[names(census)=="SE_T008_013"] <- "E" #85 +
census %<>% mutate("old" =  E + StE + StS + FtS)
names(census)[names(census)=="SE_T014_002"] <- "White"
names(census)[names(census)=="SE_T014_003"] <- "Black"
names(census)[names(census)=="SE_T014_004"] <- "American_Indian"
census %<>% mutate("Asian_or_Pacific_Islander" =  SE_T014_005 + SE_T014_006)
census %<>% mutate("Other" =  SE_T014_007 + SE_T014_008)
names(census)[names(census)=="SE_T093_001"] <- "Median_Household_Income"
census %<>% mutate("med_th" = Median_Household_Income/1000) #In thousands of dollars.
names(census)[names(census)=="SE_T185_001"] <- "People_with_Poverty_Status"
names(census)[names(census)=="SE_T185_002"] <- "Really_Struggling"
names(census)[names(census)=="SE_T185_003"] <- "Struggling"
names(census)[names(census)=="SE_T185_004"] <- "Poor"
names(census)[names(census)=="SE_T185_005"] <- "Doing_OK"
census %<>% mutate("poor" = (Struggling + Really_Struggling)/People_with_Poverty_Status)
census %<>% select(Total_Population, Males, Females, FIPS_code, White, Black, American_Indian, Asian_or_Pacific_Islander, Other, Median_Household_Income, People_with_Poverty_Status, Really_Struggling, Struggling, Poor, Doing_OK, ZtF, FtN, TtF, FtS, EtT, TtT, TtFou, FtFif, FtSix, StS, StE, E, old, poor, med_th)
breast <- subset(SEER, cancer_type=="Breast ")
breast %<>% group_by(FIPS_code) %>%
summarize(Total_Patients = n())
breast <- left_join(breast, census, by = "FIPS_code")
ggplot(breast, aes(x = med_th, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income (in Thousands of $)") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = med_th, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income (in thousands of dollars)") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
bmodel <- glm(Total_Patients ~ (old) + med_th + poor, family=poisson,
data=breast, offset=log(Total_Population))
summary(bmodel)
bb <- coefficients(bmodel)
exp(bb)
bmodel <- glm(Total_Patients ~ (old) + Median_Household_Income + poor, family=poisson,
data=breast, offset=log(Total_Population))
summary(bmodel)
bb <- coefficients(bmodel)
exp(bb)
ggplot(breast, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_bar(stat = "identity") +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_bar(stat = "identity", barwidth = 1000) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_point() +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_point() +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(breast, aes(x = poor, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Percent of Very Poor Individuals") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
bmodel <- glm(Total_Patients ~ (old) + Median_Household_Income + poor, family=poisson,
data=breast, offset=log(Total_Population))
summary(bmodel)
bb <- coefficients(bmodel)
exp(bb)
1.00018381^10000
1.00018381^10000
bmodel <- glm(Total_Patients ~ (old) + poor, family=poisson,
data=breast, offset=log(Total_Population))
summary(bmodel)
bb <- coefficients(bmodel)
exp(bb)
1.000209604^10000
lung <- subset(SEER, cancer_type=="Lung and Bronchus ")
lung %<>% group_by(FIPS_code) %>%
summarize(Total_Patients = n())
lung <- left_join(lung, census, by = "FIPS_code")
ggplot(lung, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Lung Cancer per 10k Individuals") +
scale_y_log10()
ratel <- sum(lung$Total_Patients)/sum(lung$Total_Population)
ratel
ggplot(lung, aes(x = Median_Household_Income, y = Total_Patients/Total_Population*10000)) +
geom_point() +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Median Household Income") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(lung, aes(x = poor, y = Total_Patients/Total_Population*10000)) +
geom_point(na.rm = TRUE) +
geom_smooth(method = "lm", na.rm = TRUE) +
xlab("Percent of Very Poor Individuals") +
ylab("Breast Cancer per 10k Individuals") +
scale_y_log10()
ggplot(lung, aes(x = old, y = Total_Patients)) +
geom_point() +
xlab("Population of Adults Over 55") +
ylab("Lung Cancer Counts") +
ggtitle("Lung Cancer vs. Age")
lmodel <- glm(Total_Patients ~ old + Median_Household_Income, family=poisson,
data=lung, offset=log(Total_Population))
summary(lmodel)
lb <- coefficients(lmodel)
exp(lb)
1.000209604^1000
exp(bb)
lmodel <- glm(Total_Patients ~ old + Median_Household_Income, family=poisson,
data=lung, offset=log(Total_Population))
summary(lmodel)
lb <- coefficients(lmodel)
exp(lb)
pollution %<>% mutate(above.avg.SO2 = ifelse(so2 > mean(so2),1,0))
model4 <- lm(mort ~ as.factor(above.avg.SO2) * log(nox), data=pollution)
summary(model4)
b <- coefficients(model4)
b
p <- ggplot(pollution, aes(x=log(nox), y=mort, color=as.factor(above.avg.SO2))) +
geom_point(size = 3) +
xlab("log(Nitric Oxides Levels)") +
ylab("Mortality Rate")
p + geom_abline(intercept=b[1], slope=b[3], col="#F8766D", size=1) +
geom_abline(intercept=b[1]+b[2], slope=b[3]+b[4], col="#00BFC4", size=1)
p <- ggplot(pollution, aes(x=log(nox), y=mort, color=as.factor(above.avg.SO2))) +
geom_point(size = 3) +
xlab("log(Nitric Oxides Levels)") +
ylab("Mortality Rate")
p + geom_abline(intercept=b[1], slope=b[3], col="#F8766D", size=1) +
geom_abline(intercept=b[1]+b[2], slope=b[3]*b[4], col="#00BFC4", size=1)
p + geom_abline(intercept=b[1], slope=b[3], col="#F8766D", size=1) +
geom_abline(intercept=b[1]+b[2], slope=b[3]+b[4], col="#00BFC4", size=1)
ggplot(profiles, aes(height, fill = sex)) +
geom_histogram(binwidth = 1)
model <- glm(is.female ~ height + factor(has.laugh), family = binomial, data = profiles)
ggplot(profiles, aes(drinks, fill = sex)) + geom_histogram() +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(drinks, fill = sex)) + geom_histogram(stat = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(drinks, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
View(profiles)
ggplot(profiles, aes(diet, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(body_type, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(body_type, fill = sex)) +
geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
xlab("Body Type") +
ylab("Count")
profiles %<>% mutate("is.athletic" = ifelse(profiles$body_type=="athletic", 1, 0)
profiles %<>% mutate("is.athletic" = ifelse(profiles$body_type=="athletic", 1, 0))
profiles %<>% mutate("is.athletic" = ifelse(profiles$body_type=="athletic", 1, 0))
View(profiles)
profiles %<>% mutate("is.curvy" = ifelse(profiles$body_type=="curvy", 1, 0))
View(profiles)
model <- glm(is.female ~ height + factor(has.laugh) + factor(is.atheltic) + factor(is.curvy), family = binomial, data = profilesa)
profilesa <- slice(profiles, 1:(nrow(profiles)/2))
profilesb <- slice(profiles, (nrow(profiles)/2 + 1):nrow(profiles))
model <- glm(is.female ~ height + factor(has.laugh) + factor(is.atheltic) + factor(is.curvy), family = binomial, data = profilesa)
model <- glm(is.female ~ height + factor(has.laugh) + factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(has.laugh), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(has.laugh) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
ggplot(profiles, aes(drinks, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
names(profiles)
ggplot(profiles, aes(ethnicity, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(diet, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(drugs, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(education, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(income, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(job, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(last_online, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(location, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(offspring, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(orientation, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(pets, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(religion, aes(pets, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
names(profiles)
ggplot(profiles, aes(religion, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(sign, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(smokes, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(speaks, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(speaks=="C++", fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
View(profilesa)
ggplot(profiles, aes(speaks=="fluently", fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(speaks=="spanish", fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(speaks=="chinese", fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(status, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
profilesa <- slice(profiles, 1:(nrow(profiles)/2))
profilesb <- slice(profiles, (nrow(profiles)/2 + 1):nrow(profiles))
# Train with first half.
model <- glm(is.female ~ height +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(has.laugh) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
ggplot(profiles, aes(job, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(job == "computer / hardware / software", fill = sex)) +
geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(profiles, aes(job, fill = sex)) +
geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
profiles %<>%
mutate("in.tech" = ifelse(profiles$job == "computer / hardware / software" |
profiles$job == "science / tech / engineering", 1, 0))
View(present)
View(profiles)
profilesa <- slice(profiles, 1:(nrow(profiles)/2))
profilesb <- slice(profiles, (nrow(profiles)/2 + 1):nrow(profiles))
# Train with first half.
model <- glm(is.female ~ height + factor(has.laugh) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 3) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(in.tech)
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
ggplot(profiles, aes(job, fill = sex)) +
geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x), count=length(x)))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x), count=nrow(x)))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x), count=n())))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x), count=n() ))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x), count=n())
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
model <- glm(is.female ~ height +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
model <- glm(is.female ~ height + factor(in.tech)
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
model <- glm(is.female ~ height + factor(in.tech) + factor(has.laugh) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(has.laugh) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
View(profiles)
model <- glm(is.female ~ height + factor(in.tech) + username.len +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
names(profiles)
ggplot(profiles, aes(age, fill = sex)) + geom_bar(position = "dodge") +
theme(axis.text.x=element_text(angle=45, hjust=1))
model <- glm(is.female ~ height * factor(in.tech) *
factor(is.athletic) * factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height * factor(in.tech) *
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
model <- glm(is.female ~ height + factor(in.tech) +
factor(is.athletic) + factor(is.curvy), family = binomial, data = profilesa)
# Make predictions and convert to usable value with inverse logit function.
profilesb$predictions <- predict(model, profilesb)
profilesb$predictions <- 1/(1+exp(-profilesb$predictions))
aggregate(predictions~is.female, data=profilesb, FUN=function(x) c(mean=mean(x)))
ggplot(profilesb, aes(jitter(is.female), predictions)) +
geom_point(size = 2) +
geom_abline(intercept = 0, size = 1) +
xlab("is.female") +
ylab("Prediction") +
ggtitle("Predicting A Female Profile")
summary(model)
b <- coefficients(model)
1/(1+exp(-b))
b <- coefficients(model)
b
