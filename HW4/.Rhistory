ggplot(vdf, aes(x = height, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Oil Height (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependant on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)")
ggplot(vdf, aes(x = height, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Oil Height (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependant on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling"))
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)"))
ggplot(vdf, aes(x = height, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Oil Height (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependant on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)"))
ggplot(vdf, aes(x = Dia, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependant on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling"))
?jitter
vdf %<>% mutate(jitterD = jitter(Dia))
vdf <- mutate(vdf, jitterD = jitter(Dia))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits=c(D1,D2,D3))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(values = Dia, labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(values = Dia, labels=c("D1","D2","D3"))
Dia
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(values = jitterD, labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(values = vdf$jitterD, labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(values = vdf$jitterD, limits = vdf$jitterD,labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = vdf$jitterD,labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1.0,2.0),labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1.0,1.2),labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3"))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3"), range) +
coord_cartesian(xlim = c(1.0, 1.2))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3"), range)
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3")) +
coord_cartesian(xlim = c(1.0, 1.2))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Droplet Diameter (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
scale_color_discrete("Droplet\nDiameter (mm)") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("D1","D2","D3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = jitterD, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(D1,D2,D3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.98, 1.1))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(1,3))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
vdf <- mutate(vdf, jitterD = jitter(Dia)) %>% mutate(vdf, jitterT = jitter(Trial))
mutate(vdf, jitterT = jitter(Trial))
vdf
mutate(vdf, jitterT = jitter(Trial))
vdf <- mutate(vdf, jitterD = jitter(Dia)) %>% mutate(, jitterT = jitter(Trial))
vdf <- mutate(vdf, jitterT = jitter(Trial))
vdf <- mutate(vdf, jittert = jitter(trial))
ggplot(vdf, aes(x = trial, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = jittert, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(tun))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Tunneling")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = jittert, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Trial") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)")) +
scale_x_discrete(limits = c(1,2,3),labels=c("1","2","3")) +
coord_cartesian(xlim = c(0.5,3.5))
ggplot(vdf, aes(x = height, v_perp, col = factor(tun))) +
geom_point(size = 3, aes(shape = factor(Dia))) +
xlab("Oil Height (mm)") +
ylab("Perpendicular Velocity (mm/s)") +
ggtitle("Is Tunneling Dependent on\nPerpendicular Velocity?") +
guides(colour = guide_legend("Tunneling"), shape = guide_legend("Droplet\nDiameter (mm)"))
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
4/12
h <- c(1.52,1.27,1.02,1.51,1.26,1.01,1.26)
h_E <- c(0.04, 0.04, 0.03, 0.03, 0.03,0.03,0.03)
T <- c(1.0, 2/24, 0.0, 17/17, 7/19, 0/18, 4/12)
barrier <- c(2.75,3.0,3.25,2.75,3.0,3.25,3.0)
trial <- c(1,1,1,2,2,2,3)
D1 <- round(mean(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672)), digits = 2)
D_SE1 <- round(sd(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672))/sqrt(9), digits = 2)
D2 <- round(mean(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078)), digits = 2)
D_SE2 <- round(sd(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078))/sqrt(9), digits = 2)
D3 <- round(mean(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090)), digits = 2)
D_SE3 <- round(sd(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090))/sqrt(9), digits = 2)
D <- c(D1,D1,D1,D2,D2,D2,D3)
df <- data.frame(trial, barrier, h, h_E, T, D)
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
h <- c(1.52,1.27,1.02,1.51,1.26,1.01,1.26)
h_E <- c(0.04, 0.04, 0.03, 0.03, 0.03,0.03,0.03)
T <- c(1.0, 2/24, 0.0, 17/17, 7/19, 0/18, 4/13)
barrier <- c(2.75,3.0,3.25,2.75,3.0,3.25,3.0)
trial <- c(1,1,1,2,2,2,3)
D1 <- round(mean(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672)), digits = 2)
D_SE1 <- round(sd(c(0.9876,1.011,1.048,0.9968,0.9789,0.9676,0.9969,0.9969,0.9672))/sqrt(9), digits = 2)
D2 <- round(mean(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078)), digits = 2)
D_SE2 <- round(sd(c(1.042,1.094,1.113,1.011,1.154, 1.030,1.054,1.078))/sqrt(9), digits = 2)
D3 <- round(mean(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090)), digits = 2)
D_SE3 <- round(sd(c(1.089,0.9754,1.058,1.001,0.9794,1.030,0.9193,0.9878,1.090))/sqrt(9), digits = 2)
D <- c(D1,D1,D1,D2,D2,D2,D3)
df <- data.frame(trial, barrier, h, h_E, T, D)
ggplot(df, aes(h, T, col = factor(D), shape = factor(D))) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin=h-h_E, xmax=h+h_E), height=.03) +
xlab("Oil Height (mm)") +
ylab("Transmissions") +
ggtitle("Tunneling Probability by\n Height of Oil Above Barrier") +
guides(colour = guide_legend("Droplet\nDiameter (mm)"), shape = guide_legend("Droplet\nDiameter (mm)"))
as.numeric(c(2004:2014))
year <- c(2014)
crime <- "Rape"
# Covert to lat and long.
NAD.to.latlong <- function(coords){
proj <- "+proj=lcc +lat_1=44.33333333333334 +lat_2=46 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000 +y_0=0 +ellps=GRS80 +units=ft +no_defs"
coords <-
as.data.frame(coords) %>%
SpatialPoints(proj4string=CRS(proj)) %>%
spTransform(CRS("+proj=longlat +ellps=WGS84")) %>%
.@coords %>%
as.data.frame() %>%
rename(long=X.Coordinate, lat=Y.Coordinate)
return(coords)
}
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggmap))
suppressPackageStartupMessages(library(rgdal))
invisible(
google.map <-
get_map(location = "Portland, OR", maptype = "roadmap", zoom = 10, color = "color")
)
# Import data. CSV files from all years have been merged into one file using Terminal.
crime_data <- read.csv("crime_data.csv", header = TRUE) %>% tbl_df()
# Clean up date data.
suppressWarnings(
crime_data <- crime_data %>% mutate(date = mdy(date))
)
# A certain number of the geocoordinates are missing.
# Remove these.  We have to be careful about the bias this may entail.  A more
# thorough analysis would see if there is a pattern in which data are missing.
suppressWarnings(
crime_data <- crime_data %>%
mutate(
X.Coordinate = as.numeric(as.character(X.Coordinate)),
Y.Coordinate = as.numeric(as.character(Y.Coordinate))
) %>%
filter(!is.na(X.Coordinate) & !is.na(Y.Coordinate)) %>%
filter(X.Coordinate != "" & Y.Coordinate != "")
)
lat.long <-
select(crime_data, X.Coordinate, Y.Coordinate) %>%
NAD.to.latlong()
crime_data <- bind_cols(crime_data, lat.long)
setwd("~/Desktop/Math  241 (Case Studies - Statistical Analysis)/Math-241-Assignments/HW4")
# Import data. CSV files from all years have been merged into one file using Terminal.
crime_data <- read.csv("crime_data.csv", header = TRUE) %>% tbl_df()
# Clean up date data.
suppressWarnings(
crime_data <- crime_data %>% mutate(date = mdy(date))
)
# A certain number of the geocoordinates are missing.
# Remove these.  We have to be careful about the bias this may entail.  A more
# thorough analysis would see if there is a pattern in which data are missing.
suppressWarnings(
crime_data <- crime_data %>%
mutate(
X.Coordinate = as.numeric(as.character(X.Coordinate)),
Y.Coordinate = as.numeric(as.character(Y.Coordinate))
) %>%
filter(!is.na(X.Coordinate) & !is.na(Y.Coordinate)) %>%
filter(X.Coordinate != "" & Y.Coordinate != "")
)
lat.long <-
select(crime_data, X.Coordinate, Y.Coordinate) %>%
NAD.to.latlong()
crime_data <- bind_cols(crime_data, lat.long)
crime_data$group <- 76
crime <- as.character(input$crime)
crime_data <- crime_data %>%
mutate(crimeyear = as.numeric(year(date)))
dt <- crime_data %>%
group_by(crimeyear, offense) %>%
subset(offense == crime)
year <- c(2014)
crime <- "Rape"
dt <- crime_data %>%
group_by(crimeyear, offense) %>%
subset(offense == crime)
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear == year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,crimeyear != year),binwidth=1,fill="darkgrey4") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste("Number of",crime)) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear == year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,crimeyear != year),binwidth=1,fill="darkgrey") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste("Number of",crime)) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear == year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,crimeyear != year),binwidth=1,fill="gray25") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste("Number of",crime)) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
year <- c(2013,2014)
crime <- "Rape"
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear == year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,crimeyear != year),binwidth=1,fill="gray25") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste("Number of",crime)) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
(crimeyear, allequal(year))
apply(crimeyear, allequal(year))
apply(crimeyear, allequal() year)
apply(crimeyear, allequal(), year)
crime_data$group <- 76
crime <- as.character(input$crime)
ifelse(year == "All Years",
year <- as.numeric(c(2004:2014)),
year <- as.numeric(input$year))
crime_data <- crime_data %>%
mutate(crimeyear = as.numeric(year(date)))
dt <- crime_data %>%
group_by(crimeyear, offense) %>%
subset(offense == crime)
year <- c(2013,2014)
crime <- "Rape"
apply(crimeyear, allequal(), year)
apply(dt$crimeyear, allequal(), year)
lapply(dt$crimeyear, allequal(x), year)
lapply(dt$crimeyear, all.equal(x), year)
lapply(dt$crimeyear, all.equal(), year)
lapply(dt$crimeyear, all.equal(year,x))
lapply(dt$crimeyear, all.equal(year)
)
lapply(dt$crimeyear, all.equal, year)
sapply(dt$crimeyear, all.equal, year)
sapply(dt$crimeyear[[2]], all.equal, year)
sapply(year, all.equal, dt$crimeyear)
sapply(year, all.equal, unique(dt$crimeyear))
unique(dt$crimeyear)
year
intersect(unique(dt$crimeyear), year)
crimeyear == year
dt$crimeyear == year
dt$crimeyear == (2013 & 2014)
dt$crimeyear == (2013 | 2014)
dt$crimeyear == 2013 | 2014
dt$crimeyear == 2013
dt$crimeyear == 2013 | dt$crimeyear == 2014
dt$crimeyear == 2014
exists(dt$crimeyear, year)
exists(dt$crimeyear, 2014)
dt$crimeyear %in% 2013
dt$crimeyear %in% c(2013,2014)
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear %in% year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,crimeyear !%in% year),binwidth=1,fill="gray25") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste(paste("Number of",crime),"s")) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
ggplot(dt, aes(crimeyear)) +
geom_histogram(data=subset(dt,crimeyear %in% year),binwidth=1,fill="red") +
geom_histogram(data=subset(dt,!(crimeyear %in% year)),binwidth=1,fill="gray25") +
coord_cartesian(xlim = c(min(crime_data$crimeyear)-1, max(crime_data$crimeyear)+2)) +
xlab("Year Reported") + ylab(paste(paste("Number of",crime),"s")) +
ggtitle(paste(paste("Number of Cases of",crime),"per Year")) +
scale_x_discrete(breaks=c(2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014))
shinyapps::setAccountInfo(name='miguelconner4',
token='09DA1DF510B2C9474E847055BE2D11C2',
secret='<SECRET>')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='miguelconner4',
token='09DA1DF510B2C9474E847055BE2D11C2',
secret='<SECRET>')
shinyapps::setAccountInfo(name='miguelconner4',
token='09DA1DF510B2C9474E847055BE2D11C2',
secret='ME0mzXpiKJD338VeU834ocbRpej6sqR8OClzvS6X')
c(2004:2014)+0.5
require(grid.Extra)
require(gridExtra)
min(crime_data$crimeyear)
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggmap))
suppressPackageStartupMessages(library(rgdal))
suppressPackageStartupMessages(require(gridExtra))
# Covert to lat and long.
NAD.to.latlong <- function(coords){
proj <- "+proj=lcc +lat_1=44.33333333333334 +lat_2=46 +lat_0=43.66666666666666 +lon_0=-120.5 +x_0=2500000 +y_0=0 +ellps=GRS80 +units=ft +no_defs"
coords <-
as.data.frame(coords) %>%
SpatialPoints(proj4string=CRS(proj)) %>%
spTransform(CRS("+proj=longlat +ellps=WGS84")) %>%
.@coords %>%
as.data.frame() %>%
rename(long=X.Coordinate, lat=Y.Coordinate)
return(coords)
}
google.map <-
get_map(location = "Portland, OR", maptype = "roadmap", zoom = 10, color = "color")
# Import data. CSV files from all years have been merged into one file using Terminal.
crime_data <- read.csv("crime_data.csv", header = TRUE) %>% tbl_df()
# Clean up date data.
suppressWarnings(
crime_data <- crime_data %>% mutate(date = mdy(date))
)
# A certain number of the geocoordinates are missing.
# Remove these.  We have to be careful about the bias this may entail.  A more
# thorough analysis would see if there is a pattern in which data are missing.
suppressWarnings(
crime_data <- crime_data %>%
mutate(
X.Coordinate = as.numeric(as.character(X.Coordinate)),
Y.Coordinate = as.numeric(as.character(Y.Coordinate))
) %>%
filter(!is.na(X.Coordinate) & !is.na(Y.Coordinate)) %>%
filter(X.Coordinate != "" & Y.Coordinate != "")
)
lat.long <-
select(crime_data, X.Coordinate, Y.Coordinate) %>%
NAD.to.latlong()
crime_data <- bind_cols(crime_data, lat.long)
crime_data <- crime_data %>%
mutate(crimeyear = as.numeric(year(date)))
crime_data <- crime_data %>%
mutate(crimeyear = as.numeric(year(as.POSIXlt(date))))
crime_data$date
install.packages("BH")
