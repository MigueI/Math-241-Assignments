top_n(15, Sunday)
topnoblues <- subset(jukebox, sunblues == 0) %>%
group_by(track) %>%
summarize(Not_Sunday = n()/218110)
topblues <- left_join(topblues, topnoblues, by="track") %>%
gather(., "sunblues", "percent", 2:3)
topblues$track <- factor(topblues$track,
levels = unique(topblues$track[order((topblues$percent &
topblues$sunblues == "sun_percent"))]))
ggplot(topblues, aes(track, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Track") +
scale_fill_discrete("Group") +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Song Choice Difference\nDuring Sunday Night Blues")
topbluea <- subset(jukebox, sunblues == 1) %>%
group_by(artist) %>%
summarize(Sunday = n()/12454) %>%
arrange(Sunday) %>%
top_n(15, Sunday)
# Find top artists NOT during sunday blues
topnobluea <- subset(jukebox, sunblues == 0) %>%
group_by(artist) %>%
summarize(Not_Sunday = n()/218110)
# Combine, format, then arrange data sets
topbluea <- left_join(topbluea, topnobluea, by="artist") %>%
gather(., "sunblues", "percent", 2:3)
topbluea$artist <- factor(topbluea$artist,
levels = unique(topbluea$artist[order((topbluea$percent &
topbluea$sunblues == "sun_percent"))]))
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group") +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
jukebox <- jukebox %>%
mutate(sunblues = ifelse(wday(date_time)==7 & 23 > hour(date_time) & hour(date_time) > 16,1,0))
count(jukebox, sunblues == 1)
# Find top songs during sunday blues
topblues <- subset(jukebox, sunblues == 1) %>%
group_by(track) %>%
summarize(Sunday_Blues = n()/12454) %>%
arrange(Sunday_Blues) %>%
top_n(15, Sunday_Blues)
# Find top songs NOT during sunday blues
topnoblues <- subset(jukebox, sunblues == 0) %>%
group_by(track) %>%
summarize(Other = n()/218110)
# Combine, format, then arrange data sets
topblues <- left_join(topblues, topnoblues, by="track") %>%
gather(., "sunblues", "percent", 2:3)
topblues$track <- factor(topblues$track,
levels = unique(topblues$track[order((topblues$percent &
topblues$sunblues == "sun_percent"))]))
ggplot(topblues, aes(track, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Track") +
scale_fill_discrete("Group") +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Song Choice Difference\nDuring Sunday Night Blues")
topbluea <- subset(jukebox, sunblues == 1) %>%
group_by(artist) %>%
summarize(Sunday_Blues = n()/12454) %>%
arrange(Sunday_Blues) %>%
top_n(15, Sunday_Blues)
# Find top artists NOT during sunday blues
topnobluea <- subset(jukebox, sunblues == 0) %>%
group_by(artist) %>%
summarize(Other = n()/218110)
# Combine, format, then arrange data sets
topbluea <- left_join(topbluea, topnobluea, by="artist") %>%
gather(., "sunblues", "percent", 2:3)
topbluea$artist <- factor(topbluea$artist,
levels = unique(topbluea$artist[order((topbluea$percent &
topbluea$sunblues == "sun_percent"))]))
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group") +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group", values=c("steelblue4", "darkorange2")) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group", huepal=c("steelblue4", "darkorange2")) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group", h=c("steelblue4", "darkorange2")) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_discrete("Group") +
scale_fill_manual("Group",values = c('#0023a0', '#f9a635'))
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'darkorange2'))
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'darkorange2')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'darkorange1')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'chartreuse')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'indianred3')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
ggplot(topbluea, aes(artist, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Artist") +
scale_fill_manual("Group",values = c('steelblue4', 'indianred1')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Artist Choice Difference\nDuring Sunday Night Blues")
```
# Pick out relevant sunday night blues data.
jukebox <- jukebox %>%
mutate(sunblues = ifelse(wday(date_time)==7 & 23 > hour(date_time) & hour(date_time) > 16,1,0))
count(jukebox, sunblues == 1)
# Find top songs during sunday blues
topblues <- subset(jukebox, sunblues == 1) %>%
group_by(track) %>%
summarize(Sunday_Blues = n()/12454) %>%
arrange(Sunday_Blues) %>%
top_n(15, Sunday_Blues)
# Find top songs NOT during sunday blues
topnoblues <- subset(jukebox, sunblues == 0) %>%
group_by(track) %>%
summarize(Other = n()/218110)
# Combine, format, then arrange data sets
topblues <- left_join(topblues, topnoblues, by="track") %>%
gather(., "sunblues", "percent", 2:3)
topblues$track <- factor(topblues$track,
levels = unique(topblues$track[order((topblues$percent &
topblues$sunblues == "sun_percent"))]))
ggplot(topblues, aes(track, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Track") +
scale_fill_manual("Group",values = c('steelblue4', 'indianred1')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Song Choice Difference\nDuring Sunday Night Blues")
ggplot(topblues, aes(track, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Track") +
scale_fill_manual("Group",values = c('steelblue3', 'indianred1')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Song Choice Difference\nDuring Sunday Night Blues")
ggplot(topblues, aes(track, percent, fill=sunblues)) +
geom_bar(stat = "identity", position = "dodge") +
ylab("Percentage of Times Played") +
xlab("Track") +
scale_fill_manual("Group",values = c('steelblue4', 'indianred1')) +
theme(axis.text.x=element_text(angle=65, hjust=1)) +
ggtitle("Song Choice Difference\nDuring Sunday Night Blues")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value (USD)") +
scale_fill_manual("Object",values = c('steelblue4', 'indianred1')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
# Load data
gold <- Quandl("BUNDESBANK/BBK01_WT5511")
bitcoin <- Quandl("BAVERAGE/USD") %>% tbl_df()
bitcoin <- rename(bitcoin, Avg = `24h Average`)
bitcoin <- left_join(bitcoin, gold, by="Date")
bitcoin <- na.omit(bitcoin)
# Find daily change in gold prices
mg <- mean(bitcoin$Value)
for(i in seq(1, nrow(bitcoin))){
bitcoin$gold[i] <- ((bitcoin$Value[i+1] - bitcoin$Value[i])/mg)
bitcoin$gold[nrow(bitcoin)] <- 0
}
# Find daily change in bitcoin prices
mb <- mean(bitcoin$Avg)
for(i in seq(1, nrow(bitcoin))){
bitcoin$bit[i] <- ((bitcoin$Avg[i+1] - bitcoin$Avg[i])/mb)
bitcoin$bit[nrow(bitcoin)] <- 0
}
# Reformat data
bitcoin <- gather(bitcoin, "object", "avg", `bit`, `gold`)
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value (USD)") +
scale_fill_manual("Object",values = c('steelblue4', 'indianred1')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value (USD)") +
scale_fill_manual("Object",values = c('steelblue4', 'darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value (USD)") +
scale_fill_manual("Object", values = c('steelblue4', 'darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value") +
scale_fill_manual("Object", values = c('steelblue4', 'darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(col = c('steelblue4', 'darkgoldenrod3')) +
xlab("Time") +
ylab("Change in Value") +
scale_fill_manual("Object") +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(colour = c('steelblue4', 'darkgoldenrod3')) +
xlab("Time") +
ylab("Change in Value") +
scale_fill_manual("Object") +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value") +
scale_fill_manual("Object", values = c('bitcoin' = 'steelblue4', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value") +
scale_fill_manual("Object", values = c('bit' = 'steelblue4', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'steelblue4', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line() +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(aes(size=2)) +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(aes(size=1.2)) +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(aes(size=1.02)) +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(size=2) +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(size=1.2) +
xlab("Time") +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
install_github("jrnold/ggthemes")
```{r, echo=FALSE}
library("devtools")
install_github("jrnold/ggthemes")
suppressPackageStartupMessages(library("ggthemes"))
suppressPackageStartupMessages(library(ggthemes))
ggplot(bitcoin, aes(Date, avg, col=object)) +
geom_line(size=1.2) +
xlab("Time") +
theme_economist() +
ylab("Change in Value") +
scale_color_manual("Object", values = c('bit' = 'black', 'gold'='darkgoldenrod3')) +
ggtitle("Daily Change in Value for\n Bitcoin vs. Gold")
ggplot(bitcoin, aes(Date, change)) +
geom_line() +
xlab("Time") +
theme_economist() +
ylab("Daily Change (USD)")
bitcoin <- Quandl("BAVERAGE/USD") %>% tbl_df()
bitcoin <- rename(bitcoin, Avg = `24h Average`, Total.Volume = `Total Volume`)
bitcoin <- subset(bitcoin, year(Date) > 2012)
# Find daily change in bitcoin prices
for(i in seq(1, nrow(bitcoin))){
bitcoin$change[i] <- bitcoin$Avg[i+1] - bitcoin$Avg[i]
bitcoin$change[nrow(bitcoin)] <- 0
}
ggplot(bitcoin, aes(Date, change)) +
geom_line() +
xlab("Time") +
theme_economist() +
ylab("Daily Change (USD)")
View(bitcoin)
ggplot(jukebox_week, aes(date_time, week.count, col = as.factor(Season))) +
xlab("Time of Year") +
ylab("Song Count") +
scale_color_discrete("Season") +
geom_point(size = 3) +
theme_fivethirtyeight() +
geom_smooth(method="lm", fill=NA)
# Use super handy floor_date() to collapse by week.
jukebox_week <- jukebox
jukebox_week$date_time <- floor_date(jukebox_week$date_time, "week")
# Count songs per week.
jukebox_week <- jukebox_week %>%
group_by(date_time) %>%
summarize(week.count = n())
# Sort weeks by season.
jukebox_week <- mutate(jukebox_week,
Season = ifelse(week(jukebox_week$date_time) %in% seq(5,20), "spring semester",
ifelse(week(jukebox_week$date_time) %in% seq(21,37), "summer break",
ifelse(week(jukebox_week$date_time) %in% seq(38,51),
"fall semester", "winter break")
)
)
)
ggplot(jukebox_week, aes(date_time, week.count, col = as.factor(Season))) +
xlab("Time of Year") +
ylab("Song Count") +
scale_color_discrete("Season") +
geom_point(size = 3) +
theme_fivethirtyeight() +
geom_smooth(method="lm", fill=NA)
ggplot(jukebox_week, aes(date_time, week.count, col = as.factor(Season))) +
xlab("Time of Year") +
ylab("Song Count") +
scale_color_discrete("Season") +
geom_point(size = 3) +
geom_smooth(method="lm", fill=NA)
# Use super handy floor_date() to collapse by month.
jukebox_month <- jukebox
jukebox_month$date_time <- floor_date(jukebox_month$date_time, "month")
# Pick relevant artists and count songs by month.
jukebox_month <- jukebox_month %>%
group_by(artist, date_time) %>%
summarize(month.count = n()) %>%
filter(artist == "Eminem" | artist == "Talking Heads" | artist == "Girl Talk")
ggplot(jukebox_month, aes(date_time, month.count, fill = artist)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete("Artist") +
xlab("Month") +
theme_fivethirtyeight() +
ylab("Song Count") +
ggtitle("Songs by Month")
ggplot(jukebox_month, aes(date_time, month.count, fill = artist)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_discrete("Artist") +
xlab("Month") +
ylab("Song Count") +
ggtitle("Songs by Month")
fuel <- fuel %>%
spread(fuel, price) %>%
mutate("diff" = (diesel - gas))
ggplot(fuel, aes(Date, diff)) +
geom_line() +
xlab("Date") +
ylab("Price Difference\n per Gallon ($)") +
scale_fill_discrete("Fuel")
ggtitle("Price Difference in Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
diesel <- Quandl("BTS_MM/MOTOR_FUEL_DIESEL_PRICE")
gas <- Quandl("BTS_MM/MOTOR_FUEL_GASOLINE_PRICE")
# Combine data sets, use only price in dollars.
fuel <- left_join(gas[1:2], diesel[1:2], by="Date")
names(fuel)[2] <- paste("gas")
names(fuel)[3] <- paste("diesel")
fuel <- fuel %>% gather("fuel","price", 2:3)
ggplot(fuel, aes(Date, price, col=fuel)) +
geom_line() +
xlab("Date") +
ylab("Price per Gallon ($)") +
ggtitle("Price of Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
ggplot(fuel, aes(Date, diff)) +
geom_line() +
xlab("Date") +
ylab("Price Difference\n per Gallon ($)") +
scale_fill_discrete("Fuel") +
ggtitle("Price Difference in Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
# Combine data sets, use only price in dollars.
fuel <- left_join(gas[1:2], diesel[1:2], by="Date")
names(fuel)[2] <- paste("gas")
names(fuel)[3] <- paste("diesel")
fuel <- fuel %>% gather("fuel","price", 2:3)
ggplot(fuel, aes(Date, price, col=fuel)) +
geom_line() +
xlab("Date") +
ylab("Price per Gallon ($)") +
scale_fill_discrete("Fuel") +
ggtitle("Price of Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
ggplot(fuel, aes(Date, price, col=fuel)) +
geom_line() +
xlab("Date") +
ylab("Price per Gallon ($)") +
scale_color_discrete("Fuel") +
ggtitle("Price of Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
fuel <- fuel %>%
spread(fuel, price) %>%
mutate("diff" = (diesel - gas))
ggplot(fuel, aes(Date, diff)) +
geom_line() +
xlab("Date") +
ylab("Price Difference\n per Gallon ($)") +
ggtitle("Price Difference in Gasoline vs. Diesel Over Time") +
geom_smooth(method="lm")
# Calculate a combined MPG (according to fuel economy.gov):
g_mpg <- 25*0.55 + 34*0.45
d_mpg <- 31*0.55 + 46*0.45
# Difference in Jetta car price (diesel - gas)
cardiff <- 24075 - 22325
# Number of miles I drive in a year and in a day (based on previous car).
mi_year <- (40000-15000)/5
mi_day <- mi_year/365.25
# Clean data for model.
fuel <- fuel %>% mutate(Date = parse_date_time(Date, "ymd")) %>%
mutate(day = as.numeric(as.duration(interval(Date[1], Date)))/(60*60*24)) %>%
mutate(day = day - day[nrow(fuel)])
# Make linear model.
gmodel <- lm(gas ~ day, data = fuel)
dmodel <- lm(diesel ~ day, data = fuel)
g <- coefficients(gmodel)
d <- coefficients(dmodel)
# So gas increases by $0.00042 per day, and diesel by $0.00049 per day,
# and currently, the price is $3.47 per gallon of gas and $3.78 per gallon of diesel.
# Make chart for next 10000 days. Each day, compute the total amount of
# money spend on gas that day. This ends up being about $2 per day.
cost <- data.frame("day" = seq(0,10000)) %>%
mutate(gas = g[2]*day + g[1]) %>%
mutate(diesel = d[2]*day + d[1]) %>%
mutate(gdaycost = gas/g_mpg*mi_day) %>%
mutate(ddaycost = gas/d_mpg*mi_day) %>%
mutate(Gas = 0) %>%
mutate(Diesel = 0) %>%
mutate(year = day/365.25)
# Find total amount spent, rather than just cost per year.
# Also factor in original cost difference.
for(i in seq(1,10001)){
cost$Gas[i] <- sum(cost$gdaycost[1:i])
cost$Diesel[i] <- sum(cost$ddaycost[1:i]) + cardiff
}
cost <- cost %>%
gather("Fuel", "total", 6:7)
ggplot(cost, aes(year, total, col=Fuel)) +
geom_point() +
xlab("Time (year)") +
ylab("Cumulative Cost ($)") +
ggtitle("Cumulative Cost Comparison of\n Diesel and Gas Cars\n(Assuming 5,000 mi per Year)")
setwd("~/Desktop/Math 241 (Case Studies - Statistical Analysis)")
setwd("~/Desktop/Math 241 (Case Studies - Statistical Analysis)/Math-241-Assignments/HW3")
