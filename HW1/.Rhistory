source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
View(cdc)
head(cdc)
summary(cdc$weight)
library(dplyr)
library(ggplot)
library(ggplot2)
table(cdc$smoke100)
table(cdc$smoke100)/20000
barplot(table(cdc$smoke100)/20000)
table(cdc$smoke100, cdc$gender)
mosaicplot(table(cdc$smoke100, cdc$gender))
dim(cdc)
cdc[,6]
cdc$gender==m
cdc$gender == "m"
cdc$age > 30
mdata <- subset(cdc, cdc$age > 30)
mdata
mdata <- subset(cdc, 20< cdc$age < 22)
mdata <- subset(cdc, 20 < cdc$age < 22)
mdata <- subset(cdc,cdc$age < 22)
mdata <- subset(cdc,cdc$age > 20)
mdata
mdata <- subset(cdc,cdc$age > 20 & cdc$gender == "m")
mdata
summary(mdata)
boxplot(cdc$height ~ cdc$gender)
boxplot(bmi ~ cdc$genhlth)
bmi <- (cdc$weight / cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
boxplot(bmi ~ cdc$age)
boxplot(bmi ~ cdc$smoke100)
boxplot(bmi ~ cdc$exerany)
boxplot(bmi ~ cdc$hlthpln)
boxplot(bmi ~ cdc$hlthplan)
hist(cdc$age)
hist(bmi, breaks = 50)
source("http://www.openintro.org/stat/data/cdc.R")
library(dplyr)
names(cdc)
ggplot(data = cdc, aes(x =weight, y = wtdesire)) + geom_point()
ggplot(data = cdc, aes(x =weight, y = wtdesire)) + geom_point() + facet_wrap(~gender)
wdiff <- (cdc$wtdesire-cdc$weight)
cdc %<>% mutate(cdc, wdiff = (cdc$wtdesire-cdc$weight))
mutate(cdc, wdiff = (cdc$wtdesire-cdc$weight))
names(cdc)
source("http://www.openintro.org/stat/data/cdc.R")
mutate(cdc, wdiff = (cdc$weight-cdc$wtdesire))
View(cdc)
mutate(cdc, wdiff = (cdc$weight-cdc$wtdesire))
library(rvest)
cdc %<>% mutate(cdc, wdiff = (cdc$weight-cdc$wtdesire))
cdc <- mutate(cdc, wdiff = (cdc$weight-cdc$wtdesire))
View(cdc)
ggplot(cdc, aes(x=wdiff))+geom_histogram(stat="identity")
ggplot(cdc, aes(x=wdiff))+geom_histogram(stat="bins")
ggplot(cdc, aes(x=wdiff))+geom_histogram()
ggplot(cdc, aes(x=wdiff))+geom_histogram(binwidth = 5)
ggplot(cdc, aes(x=wdiff))+geom_histogram(binwidth = 5) + facet_wrap(~gender)
ggplot(cdc, aes(x=wdiff))+geom_boxplot()
ggplot(cdc, aes(x=wdiff))+geom_histogram(binwidth = 5) + facet_wrap(~gender)
ggplot(cdc, aes(x=wdiff, y = gender))+geom_boxplot()
ggplot(cdc, aes(x=gender, y = wdiff))+geom_boxplot()
ggplot(cdc, aes(x=wdiff))+geom_boxplot
ggplot(cdc, aes(y=wdiff))+geom_boxplot
ggplot(cdc, aes(y=wdiff))+geom_boxplot()
ggplot(cdc, aes(x=wdiff))+geom_boxplot()
summary(cdc$wdiff)
summary(mdata$wdiff)
mdata
mdata$wdiff
View(mdata)
cdc <- mutate(cdc, wdiff = (cdc$weight-cdc$wtdesire))
mdata <- subset(cdc, cdc$gender == "m")
summary(mdata$wdiff)
summary(mdata$wdiff)
fdata <- subset(cdc, cdc$gender == "f")
summary(fdata$wdiff)
ggplot(cdc, aes(x=wdiff))+geom_histogram()
ggplot(cdc, aes(x=wdiff))+geom_histogram(binwidth=5)
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
head(kobe)
View(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe$basket)
table(kobe_streak)
barplot(table(kobe_streak))
max(kobe_streak)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
table(sim_unfair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
sim_basket <- sample(outcomes, size = 1, replace = TRUE, prob= c(0.45,0.55))
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
barplot(table(sim_basket))
barplot(table(kobe$basket))
barplot(table(sim_basket))
barplot(table(kobe$basket))
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
boxplot(kobe$baskets)
boxplot(kobe$basket)
set.seed(76)
boxplot(kobe$basket)
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")
View(kobe)
set.seed(76)
boxplot(kobe$basket)
boxplot(table(kobe$basket)
boxplot(table(kobe$basket))
kobe_streak <- calc_streak(kobe$basket)
table(kobe_streak)
barplot(table(kobe_streak))
max(kobe_streak)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
max(sim_streak)
kobe_streak <- calc_streak(sim_basket)
sim_streak <- calc_streak(sim_basket)
max(sim_streak)
set.seed(76)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
max(sim_streak)
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
max(sim_streak)
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
max(sim_streak)
barplot(sim_streak)
barplot(sim_streak)
barplot(sim_streak)
barplot(sim_streak)
barplot(table(sim_streak))
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
set.seed(76)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
set.seed(76)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
max(sim_streak)
sim_basket2 <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak2 <- calc_streak(sim_basket2)
barplot(table(sim_streak2))
sim_basket2 <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak2 <- calc_streak(sim_basket2)
barplot(table(sim_streak2))
sim_basket2 <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak2 <- calc_streak(sim_basket2)
barplot(table(sim_streak2))
sim_basket2 <- sample(outcomes, size = 133, replace = TRUE, prob= c(0.45,0.55))
sim_streak2 <- calc_streak(sim_basket2)
barplot(table(sim_streak2))
package(ggplot2)
library(ggplot2)
sdiff <- table(kobe_streak) -table(sim_streak)
barplot(sdiff)
sdiff <- table(kobe_streak) -table(sim_streak)
barplot(sdiff)
sdiff
table(kobe_streak)
kobe_streak <- calc_streak(kobe$basket)
table(kobe_streak)
barplot(table(kobe_streak))
sdiff <- table(kobe_streak) - table(sim_streak)
sdiff
table(sim_streak)
table(kobe_streak)
sdiff <- table(sim_streak) - table(kobe_streak)
sdiff
sdiff <- table(sim_streak) - table(kobe_streak)
sdiff <- table(sim_streak) - table(kobe_streak)
table(sim_streak)
table(kobe_streak)
barplot(table(kobe_streak),  main=main[1], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
barplot(table(sim_streak),  main=main[2], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
i=1:2
main = paste ("Location ", i)
barplot(table(kobe_streak),  main=main[1], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
barplot(table(sim_streak),  main=main[2], xlab='RSSI', xlim=c(0, 4), ylim=c(0, 32))
i=1:2
main = paste ("Location ", i)
barplot(table(kobe_streak),  main=main[1], xlab='RSSI', xlim=c(0, 7), ylim=c(0, 50))
barplot(table(sim_streak),  main=main[2], xlab='RSSI', xlim=c(0, 7), ylim=c(0, 50))
data$s <- table(kobe_streak)
df <- data.frame(table(kobe_streak),table(sim_streak))
df <- data.frame(table(kobe_streak),table(sim_streak))
if(!"googleVis" %in% installed.packages())
install.packages("googleVis", repos='http://cran.us.r-project.org')
suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(rvest))
suppressPackageStartupMessages(library(lubridate))
flights <- read.csv("flights.csv", stringsAsFactors = FALSE) %>%
tbl_df() %>%
mutate(date=as.Date(date))
weather <- read.csv("weather.csv", stringsAsFactors = FALSE) %>%
tbl_df() %>%
mutate(date=as.Date(date))
planes <- read.csv("planes.csv", stringsAsFactors = FALSE) %>% tbl_df()
airports <- read.csv("airports.csv", stringsAsFactors = FALSE) %>% tbl_df()
state.info <- read.csv("states.csv", header=TRUE) %>% tbl_df()
```
setwd("~/Desktop/Math 241 (Case Studies - Statistical Analysis)/Math-241-Assignments/HW1")
flights <- read.csv("flights.csv", stringsAsFactors = FALSE) %>%
tbl_df() %>%
mutate(date=as.Date(date))
weather <- read.csv("weather.csv", stringsAsFactors = FALSE) %>%
tbl_df() %>%
mutate(date=as.Date(date))
planes <- read.csv("planes.csv", stringsAsFactors = FALSE) %>% tbl_df()
airports <- read.csv("airports.csv", stringsAsFactors = FALSE) %>% tbl_df()
state.info <- read.csv("states.csv", header=TRUE) %>% tbl_df()
julfl <- mutate(flights, month = month(flights$date)) %>% group_by(month) %>% filter(month == 7)
#Join with locations of airports.
julfl <- left_join(julfl, airports, by = c("dest" ="iata"))
#Join with regions
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region) %>% select(region)
julfl <- na.omit(julfl) %>% mutate(perc = round(10000*(n()/nrow(julfl)))/100)
View(julfl)
julfl <- mutate(flights, month = month(flights$date)) %>% group_by(month) %>% filter(month == 7)
#Join with locations of airports.
julfl <- left_join(julfl, airports, by = c("dest" ="iata"))
#Join with regions
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(perc = round(10000*(n()/nrow(julfl)))/100)
```
View(julfl)
ggplot(julfl, aes(x = region, fill = factor(perc))) + geom_histogram(stat = fill) +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = region, fill = factor(perc))) + geom_histogram(stat = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
View(julfl)
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(perc = round(10000*(n()/nrow(julfl)))/100)
julfl <- mutate(flights, month = month(flights$date)) %>% group_by(month) %>% filter(month == 7)
#Join with locations of airports.
julfl <- left_join(julfl, airports, by = c("dest" ="iata"))
#Join with regions
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(perc = round(10000*(n()/nrow(julfl)))/100)
View(julfl)
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(count = n())
julfl <- mutate(flights, month = month(flights$date)) %>% group_by(month) %>% filter(month == 7)
#Join with locations of airports.
julfl <- left_join(julfl, airports, by = c("dest" ="iata"))
#Join with regions
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(count = n())
```
View(julfl)
ggplot(julfl, aes(x = region, y = count, fill = factor(perc))) +
geom_barplot(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = region, y = count, fill = factor(perc))) +
geom_barchart(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = region, y = count, fill = factor(perc))) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = region, y = count, fill = count)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = region, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier)
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
View(planes)
View(julfl)
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region)
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region, count)
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region) %>% arrange(carrier, region)
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region) %>% arrange(carrier, region)
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region) %>% arrange(carrier)
julfl <- mutate(flights, month = month(flights$date)) %>% group_by(month) %>% filter(month == 7)
#Join with locations of airports.
julfl <- left_join(julfl, airports, by = c("dest" ="iata"))
#Join with regions
julfl <- suppressWarnings(left_join(julfl, state.info, by = "state")) %>% group_by(region, carrier) %>%
select(region, carrier)
julfl <- na.omit(julfl) %>% mutate(count = n()) %>% group_by(carrier, region) %>% arrange(carrier)
View(julfl)
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Counts US Regions of flights from Houston in July") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Region") + ylab("Number of Flights")
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Proportion of Regions for Each Airlines") +
scale_fill_discrete("Percentage of\nTotal Flights") + xlab("Airlines") + ylab("Proportion of Regions")
ggplot(julfl, aes(x = carrier, y = count, fill = region)) +
geom_bar(stat = "identity", position = "fill") +
ggtitle("Proportion of Regions for Each Airlines") +
scale_fill_discrete("Region") + xlab("Airlines") + ylab("Proportion of Regions")
library(ggplot2)
library(dplyr)
# Used for string manipulation:
library(stringr)
# User for ROC Curves:
install.packages("ROCR", repos="http://cran.rstudio.com/")
library(ROCR)
